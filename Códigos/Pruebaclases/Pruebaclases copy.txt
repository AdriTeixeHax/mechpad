// #include "classTest.h"
// #include "headerTest.hpp"
#include "HID-Project.h"

#define ENCODER_1_PIN_A  2
#define ENCODER_1_PIN_B  3
#define ENCODER_1_PIN_SW 8

#define ENCODER_LED_TEST_1 4
#define ENCODER_LED_TEST_2 5

#define DELAY_CONSUMER_ACTIONS 250

class Encoder
{
public:
	// Variables.
	int pinA, pinB, pinSW;
	int currentState, lastState;

public:
	// Methods.
	void encoderSwitch(ConsumerKeycode action) // Reads the encoder switch and performs an action based on the string that is passed to it.
	{
		if (digitalRead(pinSW) == LOW)
		{
			Consumer.write(action);
			delay(DELAY_CONSUMER_ACTIONS);

			// // Debug LEDs for testing.
			// digitalWrite(ENCODER_LED_TEST_1, HIGH);
			// digitalWrite(ENCODER_LED_TEST_2, HIGH);
			// delay(250);
			// digitalWrite(ENCODER_LED_TEST_1, LOW);
			// digitalWrite(ENCODER_LED_TEST_2, LOW);
		}
	}

	int firstEncoderReading(void) // Assigns a first value to the encoder.
	{
		lastState = digitalRead(pinA);
	}

	int encoderReading(void)
	{
		int clockwise = 0;

		currentState = digitalRead(pinA);

		if (currentState != lastState && currentState == 1) // If last and current state of the rotary encoder's pin A are different, then a pulse occurred.
		{													// React to only 1 state change to avoid double count.
			if (digitalRead(pinB) != currentState)
			{
				// Debug LEDs.
				// digitalWrite(ENCODER_LED_TEST_1, HIGH);
				// delay(150);
				// digitalWrite(ENCODER_LED_TEST_1, LOW);

				clockwise = 1;
			}
			else
			{
				// Debug LEDs.
				// digitalWrite(ENCODER_LED_TEST_2, HIGH);
				// delay(150);
				// digitalWrite(ENCODER_LED_TEST_2, LOW);

				clockwise = -1;
			}
		}
		lastState = currentState;

		return clockwise;
	}
};

void encoderAction(int clockwise, ConsumerKeycode actionCW, ConsumerKeycode actionCCW)
{
	if (clockwise == 1)
		Consumer.write(actionCW);
	else if (clockwise == -1)
	{
		Consumer.write(actionCCW);
	}
}

Encoder rotaryEncoder1;

void setup()
{
	// HID initialization.
	Consumer.begin();

	// Encoder class pin definitions.
	rotaryEncoder1.pinSW = ENCODER_1_PIN_SW;
	rotaryEncoder1.pinA  = ENCODER_1_PIN_A;
	rotaryEncoder1.pinB  = ENCODER_1_PIN_B;

	// Encoder pins setup.
	pinMode(rotaryEncoder1.pinSW, INPUT_PULLUP);
	pinMode(rotaryEncoder1.pinA,  INPUT);
	pinMode(rotaryEncoder1.pinB,  INPUT);

	// Testing LEDs.
	pinMode(ENCODER_LED_TEST_1, OUTPUT);
	pinMode(ENCODER_LED_TEST_2, OUTPUT);
	digitalWrite(ENCODER_LED_TEST_1, LOW);
	digitalWrite(ENCODER_LED_TEST_2, LOW);

	// Do a first reading to setup a state for the encoder.
	rotaryEncoder1.firstEncoderReading();
}

void loop()
{
	// Check if the button was pressed or if the encoder moved.
	rotaryEncoder1.encoderSwitch(MEDIA_PLAY_PAUSE); // Argument defines the action the button does.
	encoderAction(rotaryEncoder1.encoderReading(), MEDIA_VOL_UP, MEDIA_VOL_DOWN);
}